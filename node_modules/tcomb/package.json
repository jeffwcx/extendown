{
  "_args": [
    [
      {
        "raw": "tcomb@^3.2.17",
        "scope": null,
        "escapedName": "tcomb",
        "name": "tcomb",
        "rawSpec": "^3.2.17",
        "spec": ">=3.2.17 <4.0.0",
        "type": "range"
      },
      "/home/jeffwang/fe/extendown/node_modules/mochawesome-report-generator"
    ]
  ],
  "_cnpm_publish_time": 1489138569294,
  "_from": "tcomb@>=3.2.17 <4.0.0",
  "_hasShrinkwrap": false,
  "_id": "tcomb@3.2.20",
  "_inCache": true,
  "_location": "/tcomb",
  "_nodeVersion": "5.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/tcomb-3.2.20.tgz_1489138567122_0.4703354015946388"
  },
  "_npmUser": {
    "name": "gcanti",
    "email": "giulio.canti@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tcomb@^3.2.17",
    "scope": null,
    "escapedName": "tcomb",
    "name": "tcomb",
    "rawSpec": "^3.2.17",
    "spec": ">=3.2.17 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/mochawesome-report-generator",
    "/tcomb-validation"
  ],
  "_resolved": "https://registry.npm.taobao.org/tcomb/download/tcomb-3.2.20.tgz",
  "_shasum": "823e689dcf3518d82c4b6c890a822aa6916692cd",
  "_shrinkwrap": null,
  "_spec": "tcomb@^3.2.17",
  "_where": "/home/jeffwang/fe/extendown/node_modules/mochawesome-report-generator",
  "author": {
    "name": "Giulio Canti",
    "email": "giulio.canti@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/gcanti/tcomb/issues"
  },
  "dependencies": {},
  "description": "Type checking and DDD for JavaScript",
  "devDependencies": {
    "benchmark": "2.1.0",
    "eslint": "1.10.3",
    "mocha": "2.3.4",
    "webpack": "1.12.14"
  },
  "directories": {},
  "dist": {
    "shasum": "823e689dcf3518d82c4b6c890a822aa6916692cd",
    "tarball": "https://registry.npmjs.org/tcomb/-/tcomb-3.2.20.tgz"
  },
  "files": [
    "index.js",
    "lib",
    "index.d.ts"
  ],
  "gitHead": "d231ed7b1bb1f2082451543cba5b813fef78e1db",
  "homepage": "https://github.com/gcanti/tcomb",
  "keywords": [
    "type",
    "combinators",
    "checking",
    "safety",
    "model",
    "domain",
    "debugging",
    "immutable",
    "DDD",
    "JSON",
    "store"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "gcanti",
      "email": "giulio.canti@gmail.com"
    }
  ],
  "name": "tcomb",
  "optionalDependencies": {},
  "readme": "[![build status](https://img.shields.io/travis/gcanti/tcomb/master.svg?style=flat-square)](https://travis-ci.org/gcanti/tcomb)\n[![dependency status](https://img.shields.io/david/gcanti/tcomb.svg?style=flat-square)](https://david-dm.org/gcanti/tcomb)\n![npm downloads](https://img.shields.io/npm/dm/tcomb.svg)\n[![Join the chat at https://gitter.im/gcanti/tcomb](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gcanti/tcomb?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n> \"Si vis pacem, para bellum\" - (Vegetius 5th century)\n\ntcomb is a library for Node.js and the browser which allows you to **check the types** of JavaScript values at runtime with a simple and concise syntax. It's great for **Domain Driven Design** and for adding safety to your internal code.\n\n# Setup\n\n```sh\nnpm install tcomb --save\n```\n\n**Code example**\n\nA type-checked function:\n\n```js\nimport t from 'tcomb';\n\nfunction sum(a, b) {\n  t.Number(a);\n  t.Number(b);\n  return a + b;\n}\n\nsum(1, 's'); // throws '[tcomb] Invalid value \"s\" supplied to Number'\n\n// using babel-plugin-tcomb\nfunction sum(a: number, b: number) {\n  return a + b;\n}\n```\n\nA user defined type:\n\n```js\nconst Integer = t.refinement(t.Number, (n) => n % 1 === 0, 'Integer');\n```\n\nA type-checked class:\n\n```js\nconst Person = t.struct({\n  name: t.String,              // required string\n  surname: t.maybe(t.String),  // optional string\n  age: t.Integer,                // required integer\n  tags: t.list(t.String)       // a list of strings\n}, 'Person');\n\n// methods are defined as usual\nPerson.prototype.getFullName = function () {\n  return `${this.name} ${this.surname}`;\n};\n\nconst person = Person({\n  surname: 'Canti'\n}); // throws '[tcomb] Invalid value undefined supplied to Person/name: String'\n```\n\nChrome DevTools:\n\n![throws](docs/images/throws.png)\n\n# Docs\n\n- [API](docs/API.md)\n- [A little guide to runtime type checking and runtime type introspection](docs/GUIDE.md) (Work in progress)\n\n# Features\n\n**Lightweight**\n\n3KB gzipped, no dependencies.\n\n**Type safety**\n\nAll models defined with `tcomb` are type-checked.\n\n**Note**. Instances *are not boxed*, this means that `tcomb` works great with lodash, Ramda, etc. And you can of course use them as props to React components.\n\n**Based on set theory**\n\n- Blog post: [JavaScript, Types and Sets - Part I](https://gcanti.github.io/2014/09/29/javascript-types-and-sets.html)\n- Blog post: [JavaScript, Types and Sets - Part II](https://gcanti.github.io/2014/10/07/javascript-types-and-sets-part-II.html)\n\n**Domain Driven Design**\n\nWrite complex domain models in a breeze and with a small code footprint. Supported types / combinators:\n\n* user defined types\n* structs\n* lists\n* enums\n* refinements\n* unions\n* intersections\n* the option type\n* tuples\n* dictionaries\n* functions\n* recursive and mutually recursive types\n* interfaces\n\n**Immutability and immutability helpers**\n\nInstances are immutable using `Object.freeze`. This means you can use standard JavaScript objects and arrays. You don't have to change how you normally code. You can update an immutable instance with the provided `update(instance, spec)` function:\n\n```js\nconst person2 = Person.update(person, {\n  name: { $set: 'Guido' }\n});\n```\n\nwhere `spec` is an object containing *commands*. The following commands are compatible with the [Facebook Immutability Helpers](http://facebook.github.io/react/docs/update.html):\n\n* `$push`\n* `$unshift`\n* `$splice`\n* `$set`\n* `$apply`\n* `$merge`\n\nSee [Updating immutable instances](docs/GUIDE.md#updating-immutable-instances) for details.\n\n**Speed**\n\n`Object.freeze` calls and asserts are executed only in development and stripped out in production (using `process.env.NODE_ENV !== 'production'` tests).\n\n**Runtime type introspection**\n\nAll models are inspectable at runtime. You can read and reuse the informations stored in your types (in the `meta` static member). See [The meta object](docs/GUIDE.md#the-meta-object) in the docs for details.\n\nLibraries exploiting tcomb's RTI:\n\n- [tcomb-validation](https://github.com/gcanti/tcomb-validation)\n- [tcomb-form](https://github.com/gcanti/tcomb-form)\n- Blog post: [JSON API Validation In Node.js](https://gcanti.github.io/2014/09/15/json-api-validation-in-node.html)\n\n**Easy JSON serialization / deseralization**\n\nEncodes / decodes your domain models to / from JSON for free.\n- Blog post: [JSON Deserialization Into An Object Model](https://gcanti.github.io/2014/09/12/json-deserialization-into-an-object-model.html)\n\n**Debugging with Chrome DevTools**\n\nYou can customize the behavior when an assert fails leveraging the power of Chrome DevTools.\n\n```js\n// use the default...\nt.fail = function fail(message) {\n  throw new TypeError('[tcomb] ' + message); // set \"Pause on exceptions\" on the \"Sources\" panel for a great DX\n};\n\n// .. or define your own behavior\nt.fail = function fail(message) {\n  console.error(message);\n};\n```\n\n**Pattern matching**\n\n```js\nconst result = t.match(1,\n  t.String, () => 'a string',\n  t.Number, () => 'a number'\n);\n\nconsole.log(result); // => 'a number'\n```\n\n**Babel plugin**\n\nUsing [babel-plugin-tcomb](https://github.com/gcanti/babel-plugin-tcomb) you can also write (Flow compatible) type annotations:\n\n```js\nfunction sum(a: number, b: number): number {\n  return a + b;\n}\n```\n\n**TypeScript definition file**\n\n[index.d.ts](index.d.ts)\n\n# Contributors\n\n- [Giulio Canti](https://github.com/gcanti) maintainer\n- [Becky Conning](https://github.com/beckyconning) `func` combinator ideas and documentation\n- [Andrea Lattuada](https://github.com/utaal) `declare` combinator\n\n# How to Build a standalone bundle\n\n```sh\ngit clone git@github.com:gcanti/tcomb.git\ncd tcomb\nnpm install\nnpm run dist\n```\n\nWill output 2 files:\n\n- `dist/tcomb.js` (development)\n- `dist/tcomb.min.js` (production) `Object.freeze` calls and asserts stripped out\n\n# Related libraries\n\n* [tcomb-doc](https://github.com/gcanti/tcomb-doc) Documentation tool for tcomb\n* [tcomb-validation](https://github.com/gcanti/tcomb-validation) Validation library based on type combinators\n* [tcomb-json-schema](https://github.com/gcanti/tcomb-json-schema) Transforms a JSON Schema to a tcomb type\n* [reactuate](https://github.com/reactuate/reactuate) React/Redux stack (not a boilerplate kit)\n* [tcomb-react](https://github.com/gcanti/tcomb-react) Alternative syntax for PropTypes\n* [mongorito-tcomb](https://github.com/xouabita/mongorito-tcomb) Bring schema validation to Mongorito thanks to tcomb\n* [tcomb-form](https://github.com/gcanti/tcomb-form) Forms library for react\n* [tcomb-form-types](https://github.com/Industrial/tcomb-form-types) Adds Types/Validations to tcomb-form\n* [tcomb-form-native](https://github.com/gcanti/tcomb-form-native) Forms library for react-native\n\n# Similar projects\n\n* [typed-immutable](https://github.com/Gozala/typed-immutable)\n* [immu](https://github.com/scottcorgan/immu)\n* [immutable](https://github.com/facebook/immutable-js)\n* [mori](https://github.com/swannodette/mori)\n* [seamless-immutable](https://github.com/rtfeldman/seamless-immutable)\n* [deep-freeze](https://www.npmjs.com/package/deep-freeze)\n* [freezer](https://github.com/arqex/freezer)\n* [icedam](https://github.com/winkler1/icedam)\n* [ObjectModel](https://github.com/sylvainpolletvillard/ObjectModel)\n* [rfx](https://github.com/ericelliott/rfx)\n\n# License\n\nThe MIT License (MIT)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gcanti/tcomb.git"
  },
  "scripts": {
    "dist": "webpack",
    "lint": "eslint index.js lib test",
    "perf": "node ./perf/perf",
    "test": "npm run lint && mocha"
  },
  "tags": [
    "type",
    "combinators",
    "checking",
    "safety",
    "model",
    "domain",
    "debugging",
    "immutable",
    "DDD",
    "JSON",
    "store"
  ],
  "typings": "index.d.ts",
  "version": "3.2.20"
}
