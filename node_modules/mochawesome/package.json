{
  "_args": [
    [
      {
        "raw": "mochawesome@^2.2.0",
        "scope": null,
        "escapedName": "mochawesome",
        "name": "mochawesome",
        "rawSpec": "^2.2.0",
        "spec": ">=2.2.0 <3.0.0",
        "type": "range"
      },
      "/home/jeffwang/fe/extendown"
    ]
  ],
  "_from": "mochawesome@>=2.2.0 <3.0.0",
  "_id": "mochawesome@2.2.1",
  "_inCache": true,
  "_location": "/mochawesome",
  "_nodeVersion": "6.10.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mochawesome-2.2.1.tgz_1496975495489_0.33635777537710965"
  },
  "_npmUser": {
    "name": "adamgruber",
    "email": "talknmime@gmail.com"
  },
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mochawesome@^2.2.0",
    "scope": null,
    "escapedName": "mochawesome",
    "name": "mochawesome",
    "rawSpec": "^2.2.0",
    "spec": ">=2.2.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "http://registry.npmjs.org/mochawesome/-/mochawesome-2.2.1.tgz",
  "_shasum": "f009301e0ddefc9b7423d899476730de1213a89b",
  "_shrinkwrap": null,
  "_spec": "mochawesome@^2.2.0",
  "_where": "/home/jeffwang/fe/extendown",
  "author": {
    "name": "Adam Gruber"
  },
  "bugs": {
    "url": "https://github.com/adamgruber/mochawesome/issues"
  },
  "dependencies": {
    "babel-runtime": "^6.20.0",
    "chalk": "^1.1.3",
    "diff": "^3.0.0",
    "json-stringify-safe": "^5.0.1",
    "lodash": "^4.17.3",
    "mochawesome-report-generator": "^2.1.0",
    "uuid": "^3.0.1"
  },
  "description": "A Gorgeous HTML/CSS Reporter for Mocha.js",
  "devDependencies": {
    "babel-cli": "^6.18.0",
    "babel-core": "^6.20.0",
    "babel-plugin-istanbul": "^3.0.0",
    "babel-plugin-transform-runtime": "^6.15.0",
    "babel-preset-es2015": "^6.14.0",
    "babel-preset-stage-3": "^6.11.0",
    "babel-register": "^6.14.0",
    "cross-env": "^3.1.2",
    "eslint": "^3.10.2",
    "eslint-config-airbnb-base": "^10.0.1",
    "eslint-plugin-import": "^2.2.0",
    "mocha": "*",
    "nyc": "^9.0.1",
    "proxyquire": "^1.7.10",
    "should": "^11.1.2",
    "sinon": "^2.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "f009301e0ddefc9b7423d899476730de1213a89b",
    "tarball": "https://registry.npmjs.org/mochawesome/-/mochawesome-2.2.1.tgz"
  },
  "engine": "node >= 4",
  "files": [
    "addContext.js",
    "dist"
  ],
  "gitHead": "9ac731401810b0ce6615ca0da296c9868ef1f240",
  "homepage": "https://github.com/adamgruber/mochawesome#readme",
  "keywords": [
    "mocha",
    "reporter",
    "json",
    "html"
  ],
  "license": "MIT",
  "main": "dist/mochawesome.js",
  "maintainers": [
    {
      "name": "adamgruber",
      "email": "talknmime@gmail.com"
    }
  ],
  "name": "mochawesome",
  "nyc": {
    "include": [
      "src/*.js"
    ],
    "require": [
      "babel-register"
    ],
    "sourceMap": false,
    "instrument": false,
    "reporter": [
      "lcov",
      "html",
      "text-summary"
    ],
    "cache": true,
    "check-coverage": true,
    "lines": 99,
    "statements": 99,
    "functions": 100,
    "branches": 90
  },
  "optionalDependencies": {},
  "peerDependencies": {
    "mocha": "*"
  },
  "readme": "mochawesome\n===========\n[![npm](https://img.shields.io/npm/v/mochawesome.svg?style=flat-square)](http://www.npmjs.com/package/mochawesome) [![Build Status](https://img.shields.io/travis/adamgruber/mochawesome/master.svg?style=flat-square)](https://travis-ci.org/adamgruber/mochawesome) [![Gitter](https://img.shields.io/gitter/room/nwjs/nw.js.svg?style=flat-square)](https://gitter.im/mochawesome/general) [![Code Climate](https://img.shields.io/codeclimate/github/adamgruber/mochawesome.svg?style=flat-square)](https://codeclimate.com/github/adamgruber/mochawesome)\n\nMochawesome is a custom reporter for use with the Javascript testing framework, [mocha][]. It runs on Node.js (>=4) and generates a full fledged HTML/CSS report that helps visualize your test suites.\n\n## :tada: Latest Changes\n- Display before and after hooks alongside your tests\n- Use `addContext` in `beforeEach` and `afterEach` test hooks\n- New [options](#options): `overwrite` and `timestamp`\n\nSee the [CHANGELOG][] for up-to-date changes.\n\n### mochawesome-report-generator (marge)\nTo start, the actual report generation has been moved out into its own package, [mochawesome-report-generator][]. This will make it easier to implement changes to the report as well as allow for future integration with other test libraries.\n\n### New Features\n- Every bit of the report has been redesigned for a cleaner, more streamlined look\n- Built using React and mobx\n- Supports displaying [additional test context](#adding-test-context) including images!\n- Supports displaying inline diffs for failed tests\n- New [options](#options) including hiding test code and/or charts \n- Enhanced navigation menu with clearer filtering options\n- New option to disable console messages\n\n### Plus...\n- At-a-glance stats including pass percentage\n- Beautiful charts\n- Supports nested `describe`s\n- Supports pending tests\n- Review test code inline\n- Stack trace for failed tests\n- Responsive and mobile-friendly\n- Saves JSON output for further processing\n- Offline viewing\n\n### Sample Report\n\n<img src=\"./docs/marge-report-1.0.1.png\" alt=\"Mochawesome Report\" width=\"75%\" />\n<img src=\"./docs/marge-report-menu-1.0.1.png\" alt=\"Mochawesome Report Menu\" width=\"75%\" />\n\n### Browser Support\nThe generated report has been tested to work in Chrome. It *should* work in any modern web browser, including IE9+. It is also fully self-contained for offline viewing. \n\n## Usage\n\n1. Add Mochawesome to your project:\n\n  `npm install --save-dev mochawesome`\n\n2. Tell mocha to use the Mochawesome reporter:\n\n  `mocha testfile.js --reporter mochawesome`\n\n3. If using mocha programatically:\n\n  ```js\n  var mocha = new Mocha({\n    reporter: 'mochawesome'\n  });\n  ```\n\n## Output\nMochawesome generates the following inside your project directory:\n```\nmochawesome-report/\n├── assets\n│   ├── app.css\n│   ├── app.js\n│   ├── MaterialIcons-Regular.woff\n│   ├── MaterialIcons-Regular.woff2\n│   ├── roboto-light-webfont.woff\n│   ├── roboto-light-webfont.woff2\n│   ├── roboto-medium-webfont.woff\n│   ├── roboto-medium-webfont.woff2\n│   ├── roboto-regular-webfont.woff\n│   └── roboto-regular-webfont.woff2\n├── mochawesome.html\n└── mochawesome.json\n```\n\nThe two main files to be aware of are:\n\n**mochawesome.html** - The rendered report file\n\n**mochawesome.json** - The raw json output used to render the report\n\n\n## Options\nMochawesome supports options via environment variables or passed directly to mocha.\n\nOption Name | Type | Default | Description \n:---------- | :--- | :------ | :----------\n`reportDir` | string | [cwd]/mochawesome-report | Path to save report\n`reportFilename` | string | mochawesome | Filename of saved report *(prior to version 2.0.0 this was called `reportName`)*\n`reportTitle` | string | mochawesome | Report title\n`reportPageTitle` | string | mochawesome-report | Browser title\n`inlineAssets` | boolean | false | Inline report assets (scripts, styles)\n`enableCharts` | boolean | true | Display Suite charts\n`enableCode` | boolean | true | Display test code\n`enableTestCode` | boolean | true | Same as `enableCode` *deprecated*\n`autoOpen` | boolean | false | Open the report after running tests\n`overwrite` | boolean | true | Overwrite existing report files\n`timestamp` | string | | Append timestamp in specified format to report filename. *See [notes][1].*\n`quiet` | boolean | false | Silence console messages\n\n*Setting a custom filename will change both the report html and json files.*\n\n**Options passed in will take precedence over environment variables.**\n\n#### Environment variables\nOptions can be set via environment variable. To do this you must prefix the variable with `MOCHAWESOME_` and then uppercase the variable name.\n```bash\n$ export MOCHAWESOME_REPORTDIR=customReportDir\n$ export MOCHAWESOME_INLINEASSETS=true\n$ export MOCHAWESOME_AUTOOPEN=true\n```\n\n#### Mocha options\nYou can pass comma-separated options to the reporter via mocha's `--reporter-options` flag.\n```bash\n$ mocha test.js --reporter mochawesome --reporter-options reportDir=customReportDir,reportFilename=customReportFilename\n```\nOptions can be passed in programatically as well:\n\n```js\nvar mocha = new Mocha({\n  reporter: 'mochawesome',\n  reporterOptions: {\n    reportDir: 'customReportDir',\n    reportFilename: 'customReportFilename',\n    enableCharts: false\n  }\n});\n```\n\n## Adding Test Context\nOne of the more request features has been the ability to display additional information about a test within the report. As of version 2.0.0 this is now possible with the `addContext` helper method. This method will add extra information to the test object that will then be displayed inside the report.\n\n### `addContext(testObj, context)`\n\nparam | type | description\n:---- | :--- | :----------\ntestObj | object | The test object\ncontext | string\\|object | The context to be added to the test\n\n**Context as a string**\n\nSimple strings will be displayed as is. If you pass a URL, the reporter will attempt to turn it into a link. If the URL links to an image, it will be shown inline.\n\n**Context as an object**\n\nContext passed as an object must adhere to the following shape:\n```js\n{\n  title: 'some title' // must be a string\n  value: {} // can be anything\n}\n```\n\n#### Example\n*When using the `addContext` helper, you cannot use an arrow function in your `it` statement because your `this` value will not be the test object.*\n```js\nconst addContext = require('mochawesome/addContext');\n\ndescribe('test suite', function () {\n  it('should add context', function () {\n    // context can be a simple string\n    addContext(this, 'simple string');\n\n    // context can be a url and the report will create a link\n    addContext(this, 'http://www.url.com/pathname');\n\n    // context can be an image url and the report will show it inline\n    addContext(this, 'http://www.url.com/screenshot-maybe.jpg');\n\n    // context can be an object with title and value properties\n    addContext(this, {\n      title: 'expected output',\n      value: {\n        a: 1,\n        b: '2',\n        c: 'd'\n      }\n    });\n  })\n});\n```\n\nAs of version 2.2.0 it is possible to use `addContext` from within a `beforeEach` or `afterEach` test hook.\n```js\ndescribe('test suite', () => {\n  beforeEach(function () {\n    addContext(this, 'some context')\n  });\n\n  afterEach(function () {\n    addContext(this, {\n      title: 'afterEach context',\n      value: { a: 1 }\n    });\n  });\n\n  it('should display with beforeEach and afterEach context', () => {\n    // assert something\n  });\n});\n```\n\n## v1.x\nDocumentation for version 1.x can be found [here](https://github.com/adamgruber/mochawesome/tree/v1.X).\n\n[mocha]: https://mochajs.org/\n[mochawesome-report-generator]: https://github.com/adamgruber/mochawesome-report-generator\n[CHANGELOG]: CHANGELOG.md\n[1]: https://github.com/adamgruber/mochawesome-report-generator/blob/master/README.md#timestamp\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/adamgruber/mochawesome.git"
  },
  "scripts": {
    "build": "babel src -d dist",
    "lint": "eslint src test",
    "test": "npm run lint && cross-env NODE_ENV=test nyc mocha",
    "test:ctx": "mocha test-functional/test-context.js --opts test-functional/mocha.opts",
    "test:fn": "mocha test-functional/test.js --opts test-functional/mocha.opts",
    "test:mem": "mocha test-functional/mem-test.js --opts test-functional/mocha.opts",
    "test:prog": "node ./test-programmatic"
  },
  "version": "2.2.1"
}
