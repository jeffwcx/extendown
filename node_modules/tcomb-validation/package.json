{
  "_args": [
    [
      {
        "raw": "tcomb-validation@^3.3.0",
        "scope": null,
        "escapedName": "tcomb-validation",
        "name": "tcomb-validation",
        "rawSpec": "^3.3.0",
        "spec": ">=3.3.0 <4.0.0",
        "type": "range"
      },
      "/home/jeffwang/fe/extendown/node_modules/mochawesome-report-generator"
    ]
  ],
  "_cnpm_publish_time": 1478881096550,
  "_from": "tcomb-validation@>=3.3.0 <4.0.0",
  "_hasShrinkwrap": false,
  "_id": "tcomb-validation@3.3.0",
  "_inCache": true,
  "_location": "/tcomb-validation",
  "_nodeVersion": "5.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/tcomb-validation-3.3.0.tgz_1478881094521_0.4030228150077164"
  },
  "_npmUser": {
    "name": "gcanti",
    "email": "giulio.canti@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tcomb-validation@^3.3.0",
    "scope": null,
    "escapedName": "tcomb-validation",
    "name": "tcomb-validation",
    "rawSpec": "^3.3.0",
    "spec": ">=3.3.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/mochawesome-report-generator"
  ],
  "_resolved": "https://registry.npm.taobao.org/tcomb-validation/download/tcomb-validation-3.3.0.tgz",
  "_shasum": "29ada8534203500e90b245eedd0e1a80f1909ba2",
  "_shrinkwrap": null,
  "_spec": "tcomb-validation@^3.3.0",
  "_where": "/home/jeffwang/fe/extendown/node_modules/mochawesome-report-generator",
  "author": {
    "name": "Giulio Canti",
    "email": "giulio.canti@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/gcanti/tcomb-validation/issues"
  },
  "dependencies": {
    "tcomb": "^3.0.0"
  },
  "description": "General purpose validation library for JavaScript",
  "devDependencies": {
    "eslint": "0.22.1",
    "mocha": "2.2.5"
  },
  "directories": {},
  "dist": {
    "shasum": "29ada8534203500e90b245eedd0e1a80f1909ba2",
    "tarball": "https://registry.npmjs.org/tcomb-validation/-/tcomb-validation-3.3.0.tgz"
  },
  "gitHead": "010205023ffb8f54c69e49d81b95e5f930b1a1f3",
  "homepage": "https://github.com/gcanti/tcomb-validation",
  "keywords": [
    "tcomb",
    "validation",
    "models",
    "domain"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "gcanti",
      "email": "giulio.canti@gmail.com"
    }
  ],
  "name": "tcomb-validation",
  "optionalDependencies": {},
  "readme": "[![build status](https://img.shields.io/travis/gcanti/tcomb-validation/master.svg?style=flat-square)](https://travis-ci.org/gcanti/tcomb-validation)\n[![dependency status](https://img.shields.io/david/gcanti/tcomb-validation.svg?style=flat-square)](https://david-dm.org/gcanti/tcomb-validation)\n![npm downloads](https://img.shields.io/npm/dm/tcomb-validation.svg)\n\nA general purpose JavaScript validation library based on type combinators\n\n# Features\n\n- concise yet expressive syntax\n- validates native types, refinements, objects, lists and tuples, enums, unions, dicts, intersections\n- validates structures with arbitrary level of nesting\n- detailed informations on failed validations\n- lightweight alternative to JSON Schema\n- reuse your domain model written with [tcomb](https://github.com/gcanti/tcomb)\n\n# Documentation\n\n- [Basic usage](#basic-usage)\n  - [Primitives](#primitives)\n  - [Refinements](#refinements)\n  - [Objects](#objects)\n  - [Lists and tuples](#lists-and-tuples)\n  - [Enums](#enums)\n  - [Unions](#unions)\n  - [Dicts](#dicts)\n  - [Intersections](#intersections)\n  - [Nested structures](#nested-structures)\n- [Customise error messages](#customise-error-messages)\n- [Use cases](#use-cases)\n  - [Form validation](#form-validation)\n  - [JSON schema](#json-schema)\n- [API reference](#api-reference)\n\n# Basic usage\n\n*If you don't know how to define types with tcomb you may want to take a look at its [README](https://github.com/gcanti/tcomb/blob/master/README.md) file.*\n\nThe main function is `validate`:\n\n```js\nvalidate(value, type, [options]) -> ValidationResult\n```\n\n- `value` the value to validate\n- `type` a type defined with the [tcomb](https://github.com/gcanti/tcomb) library\n- `options` (optional) is an object with the following keys\n  - `path: Array<string | number>` path prefix for validation\n  - `context: any` passed to `getValidationErrorMessage` (useful for i18n)\n  - `strict: boolean` (default `false`) if `true` no additional properties are allowed while validating structs\n\nreturns a `ValidationResult` object containing the result of the validation\n\n**Note**.\n\n- `options` can be an array (as `path` prefix) for backward compatibility (deprecated)\n\nExample\n\n```js\nvar t = require('tcomb-validation');\nvar validate = t.validate;\n\nvalidate(1, t.String).isValid();   // => false\nvalidate('a', t.String).isValid(); // => true\n```\n\nYou can inspect the result to quickly identify what's wrong:\n\n```js\nvar result = validate(1, t.String);\nresult.isValid();             // => false\nresult.firstError().message;  // => 'Invalid value 1 supplied to String'\n\n// see `result.errors` to inspect all errors\n```\n\n## Primitives\n\n```js\n// null and undefined\nvalidate('a', t.Nil).isValid();       // => false\nvalidate(null, t.Nil).isValid();      // => true\nvalidate(undefined, t.Nil).isValid(); // => true\n\n// strings\nvalidate(1, t.String).isValid();   // => false\nvalidate('a', t.String).isValid(); // => true\n\n// numbers\nvalidate('a', t.Number).isValid(); // => false\nvalidate(1, t.Number).isValid();   // => true\n\n// booleans\nvalidate(1, t.Boolean).isValid();    // => false\nvalidate(true, t.Boolean).isValid(); // => true\n\n// optional values\nvalidate(null, maybe(t.String)).isValid(); // => true\nvalidate('a', maybe(t.String)).isValid();  // => true\nvalidate(1, maybe(t.String)).isValid();    // => false\n\n// functions\nvalidate(1, t.Function).isValid();              // => false\nvalidate(function () {}, t.Function).isValid(); // => true\n\n// dates\nvalidate(1, t.Date).isValid();           // => false\nvalidate(new Date(), t.Date).isValid();  // => true\n\n// regexps\nvalidate(1, t.RegExp).isValid();    // => false\nvalidate(/^a/, t.RegExp).isValid(); // => true\n```\n\n## Refinements\n\nYou can express more fine-grained contraints with the `refinement` syntax:\n\n```js\n// a predicate is a function with signature: (x) -> boolean\nvar predicate = function (x) { return x >= 0; };\n\n// a positive number\nvar Positive = t.refinement(t.Number, predicate);\n\nvalidate(-1, Positive).isValid(); // => false\nvalidate(1, Positive).isValid();  // => true\n```\n\n## Objects\n\n### Structs\n\n```js\n// an object with two numerical properties\nvar Point = t.struct({\n  x: t.Number,\n  y: t.Number\n});\n\nvalidate(null, Point).isValid();            // => false\nvalidate({x: 0}, Point).isValid();          // => false, y is missing\nvalidate({x: 0, y: 'a'}, Point).isValid();  // => false, y is not a number\nvalidate({x: 0, y: 0}, Point).isValid();    // => true\nvalidate({x: 0, y: 0, z: 0}, Point, { strict: true }).isValid(); // => false, no additional properties are allowed\n```\n\n### Interfaces\n\n**Differences from structs**\n\n- also checks prototype keys\n\n```js\nvar Serializable = t.interface({\n  serialize: t.Function\n});\n\nvalidate(new Point(...), Serializable).isValid(); // => false\n\nPoint.prototype.serialize = function () { ... }\n\nvalidate(new Point(...), Serializable).isValid(); // => true\n```\n\n## Lists and tuples\n\n**Lists**\n\n```js\n// a list of strings\nvar Words = t.list(t.String);\n\nvalidate(null, Words).isValid();                  // => false\nvalidate(['hello', 1], Words).isValid();          // => false, [1] is not a string\nvalidate(['hello', 'world'], Words).isValid();    // => true\n```\n\n**Tuples**\n\n```js\n// a tuple (width x height)\nvar Size = t.tuple([Positive, Positive]);\n\nvalidate([1], Size).isValid();      // => false, height missing\nvalidate([1, -1], Size).isValid();  // => false, bad height\nvalidate([1, 2], Size).isValid();   // => true\n```\n\n## Enums\n\n```js\nvar CssTextAlign = t.enums.of('left right center justify');\n\nvalidate('bottom', CssTextAlign).isValid(); // => false\nvalidate('left', CssTextAlign).isValid();   // => true\n```\n\n## Unions\n\n```js\nvar CssLineHeight = t.union([t.Number, t.String]);\n\nvalidate(null, CssLineHeight).isValid();    // => false\nvalidate(1.4, CssLineHeight).isValid();     // => true\nvalidate('1.2em', CssLineHeight).isValid(); // => true\n```\n\n## Dicts\n\n```js\n// a dictionary of numbers\nvar Country = t.enums.of(['IT', 'US'], 'Country');\nvar Warranty = t.dict(Country, t.Number, 'Warranty');\n\nvalidate(null, Warranty).isValid();             // => false\nvalidate({a: 2}, Warranty).isValid();           // => false, ['a'] is not a Country\nvalidate({US: 2, IT: 'a'}, Warranty).isValid(); // => false, ['IT'] is not a number\nvalidate({US: 2, IT: 1}, Warranty).isValid();   // => true\n```\n\n## Intersections\n\n```js\nvar Min = t.refinement(t.String, function (s) { return s.length > 2; }, 'Min');\nvar Max = t.refinement(t.String, function (s) { return s.length < 5; }, 'Max');\nvar MinMax = t.intersection([Min, Max], 'MinMax');\n\nMinMax.is('abc'); // => true\nMinMax.is('a'); // => false\nMinMax.is('abcde'); // => false\n```\n\n## Nested structures\n\nYou can validate structures with an arbitrary level of nesting:\n\n```js\nvar Post = t.struct({\n  title: t.String,\n  content: t.String,\n  tags: Words\n});\n\nvar mypost = {\n  title: 'Awesome!',\n  content: 'You can validate structures with arbitrary level of nesting',\n  tags: ['validation', 1] // <-- ouch!\n};\n\nvalidate(mypost, Post).isValid();             // => false\nvalidate(mypost, Post).firstError().message;  // => 'tags[1] is `1`, should be a `Str`'\n```\n\n# Customise error messages\n\nYou can customise the validation error message defining a function `getValidationErrorMessage(value, path, context)` on the type constructor:\n\n```js\nvar ShortString = t.refinement(t.String, function (s) {\n  return s.length < 3;\n});\n\nShortString.getValidationErrorMessage = function (value) {\n  if (!value) {\n    return 'Required';\n  }\n  if (value.length >= 3) {\n    return 'Too long my friend';\n  }\n};\n\nvalidate('abc', ShortString).firstError().message; // => 'Too long my friend'\n```\n\n## How to keep DRY?\n\nIn order to keep the validation logic in one place, one may define a custom combinator:\n\n```js\nfunction mysubtype(type, getValidationErrorMessage, name) {\n  var Subtype = t.refinement(type, function (x) {\n    return !t.String.is(getValidationErrorMessage(x));\n  }, name);\n  Subtype.getValidationErrorMessage = getValidationErrorMessage;\n  return Subtype;\n}\n\nvar ShortString = mysubtype(t.String, function (s) {\n  if (!s) {\n    return 'Required';\n  }\n  if (s.length >= 3) {\n    return 'Too long my friend';\n  }\n});\n\n```\n\n# Use cases\n\n## Form validation\n\nLet's design the process for a simple sign in form:\n\n```js\nvar SignInInfo = t.struct({\n  username: t.String,\n  password: t.String\n});\n\n// retrieves values from the UI\nvar formValues = {\n  username: $('#username').val().trim() || null,\n  password: $('#password').val().trim() || null\n};\n\n// if formValues = {username: null, password: 'password'}\nvar result = validate(formValues, SignInInfo);\nresult.isValid();             // => false\nresult.firstError().message;  // => 'Invalid value null supplied to /username: String'\n```\n\n## JSON schema\n\nIf you don't want to use a JSON Schema validator or it's not applicable, you can just use this lightweight library in a snap. This is the JSON Schema example of [http://jsonschemalint.com/](http://jsonschemalint.com/)\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"foo\": {\n      \"type\": \"number\"\n    },\n    \"bar\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"a\",\n        \"b\",\n        \"c\"\n      ]\n    }\n  }\n}\n```\n\nand the equivalent `tcomb-validation` counterpart:\n\n```js\nvar Schema = t.struct({\n  foo: t.Number,\n  bar: t.enums.of('a b c')\n});\n```\n\nlet's validate the example JSON:\n\n```js\nvar json = {\n  \"foo\": \"this is a string, not a number\",\n  \"bar\": \"this is a string that isn't allowed\"\n};\n\nvalidate(json, Schema).isValid(); // => false\n\n// the returned errors are:\n- Invalid value \"this is a string, not a number\" supplied to /foo: Number\n- Invalid value \"this is a string that isn't allowed\" supplied to /bar: \"a\" | \"b\" | \"c\"\n```\n\n**Note**: A feature missing in standard JSON Schema is the powerful [refinement](#refinements) syntax.\n\n# Api reference\n\n## ValidationResult\n\n`ValidationResult` represents the result of a validation. It containes the following fields:\n\n- `errors`: a list of `ValidationError` if validation fails\n- `value`: an instance of `type` if validation succeded\n\n```js\n// the definition of `ValidationError`\nvar ValidationError = t.struct({\n  message: t.String,                        // a default message for developers\n  actual: t.Any,                            // the actual value being validated\n  expected: t.Function,                     // the type expected\n  path: list(t.union([t.String, t.Number])) // the path of the value\n}, 'ValidationError');\n\n// the definition of `ValidationResult`\nvar ValidationResult = t.struct({\n  errors: list(ValidationError),\n  value: t.Any\n}, 'ValidationResult');\n```\n\n### #isValid()\n\nReturns true if there are no errors.\n\n```js\nvalidate('a', t.String).isValid(); // => true\n```\n\n### #firstError()\n\nReturns an object that contains an error message or `null` if validation succeeded.\n\n```js\nvalidate(1, t.String).firstError().message; // => 'value is `1`, should be a `Str`'\n```\n\n## validate(value, type, [options]) -> ValidationResult\n\n- `value` the value to validate\n- `type` a type defined with the tcomb library\n- `options` (optional) is an object with the following keys\n  - `path: Array<string | number>` path prefix for validation\n  - `context: any` passed to `getValidationErrorMessage` (useful for i18n)\n  - `strict: boolean` (default `false`) if `true` no additional properties are allowed while validating structs\n\n# Tests\n\nRun `npm test`\n\n# License\n\nThe MIT License (MIT)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gcanti/tcomb-validation.git"
  },
  "scripts": {
    "lint": "eslint index.js",
    "test": "npm run lint && mocha"
  },
  "tags": [
    "tcomb",
    "validation",
    "models",
    "domain"
  ],
  "version": "3.3.0"
}
